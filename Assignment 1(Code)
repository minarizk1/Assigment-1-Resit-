// LCD module connections
sbit LCD_RS at RE2_bit;
sbit LCD_EN at RE1_bit;
sbit LCD_D0 at RD0_bit;
sbit LCD_D1 at RD1_bit;
sbit LCD_D2 at RD2_bit;
sbit LCD_D3 at RD3_bit;
sbit LCD_D4 at RD4_bit;
sbit LCD_D5 at RD5_bit;
sbit LCD_D6 at RD6_bit;
sbit LCD_D7 at RD7_bit;
// End LCD module connections
sbit LCD_RS_Direction at TRISE2_bit;
sbit LCD_EN_Direction at TRISE1_bit;
sbit LCD_D0_Direction at TRISD0_bit;
sbit LCD_D1_Direction at TRISD1_bit;
sbit LCD_D2_Direction at TRISD2_bit;
sbit LCD_D3_Direction at TRISD3_bit;
sbit LCD_D4_Direction at TRISD4_bit;
sbit LCD_D5_Direction at TRISD5_bit;
sbit LCD_D6_Direction at TRISD6_bit;
sbit LCD_D7_Direction at TRISD7_bit;

char txt1[10];
char txt2[10] ;
char txt3[] = "current:";
char txt4[] = " temp:";
char txt5[10];
char txt8[10];

unsigned char y;
unsigned char d;
void main() {
UART1_Init(9600);
ANSELA=0xFF;
ANSELB = 0;
ANSELC = 0;
ANSELD = 0;
ANSELE=0;
TRISA=0xFF;
TRISB=0xFF;
TRISC=0;
TRISD=0;
TRISE=0;

ADC_Init() ;       //
Lcd_Init();      // Initialize LCD module
Lcd_Cmd(_LCD_CLEAR);      // clear LCD
Lcd_Cmd(_LCD_CURSOR_OFF);  // Cursor off

while (1){

y = ADC_Read(2);         ////Transform the adc temperature to celsius degree temperature return temp_in_celsius;
d =  (5*y)/10;
WordToStr(d, txt1);       // //Converts input word to a string. The output string has fixed width of 6 characters including null character at the end (string termination)
Lcd_Out(1,11,txt1); 
UART1_Write_Text("your signal is < 120");
else if
Delay_ms(2000);				// set a delay of 2 seconds
UART1_Write_Text("your signal is> 120"); // Display “your signal is >120” on the UART terminal

Lcd_Out(1,1,txt3);
Lcd_Out(2,1,txt4);
Lcd_Out(3,-3,txt6);
Lcd_Out(4,-3,txt7);
